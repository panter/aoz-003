wb.add_worksheet(name: 'Stammdaten') do |sheet|
  columns = [
    'Key',
    'Key Type',
    'Bezeichnung',
    'Dimension',
    'Entität',
    'Kommentar', # optional comment column
    'Zeit'
  ]
  sheet.add_row(columns, style: header_style, height: 25)

  types_str = Array.new(6).fill(:string) + [:time]
  types_int = [:integer] + Array.new(5).fill(:string) + [:time]
  style = Array.new(6).fill(standard_format) + [date_time_format]

  ## Volunteer
  #
  rows = []
  Volunteer::SALUTATIONS.each do |salutation|
    rows << {
      data: [salutation, salutation.class.to_s, t("salutation.#{salutation}"),
             'Anrede', 'Freiwillige', '', zeit],
      types: types_str,
      style: style
    }
  end
  Volunteer::SALUTATION_GENDER_MAP.each_value do |gender|
    rows << {
      data: [gender, gender.class.to_s, t("activerecord.attributes.volunteer.genders.#{gender}"),
             'Geschlecht', 'Klienten', 'Abgeleitet aus Anrede', zeit],
      types: types_str,
      style: style
    }
  end
  Volunteer.acceptances.each do |name_key, key|
    rows << {
      data: [key, key.class.to_s, t("volunteer_acceptance_keys.#{name_key}"),
             'Prozess', 'Freiwillige', '', zeit],
      types: types_int,
      style: style
    }
  end
  [:active, :inactive].each do |state|
    rows << {
      data: [state, state.class.to_s, t("state.#{state}"), 'Status', 'Freiwillige',
             'Dynamisch aus aktuell laufenden Begleitungen und/oder Gruppenangeboten', zeit],
      types: types_str,
      style: style
    }
  end
  Client::SALUTATIONS.each do |salutation|
    rows << {
      data: [salutation, salutation.class.to_s, t("salutation.#{salutation}"),
             'Anrede', 'Klienten', '', zeit],
      types: types_str,
      style: style
    }
  end
  Client::SALUTATION_GENDER_MAP.each_value do |gender|
    rows << {
      data: [gender, gender.class.to_s, t("activerecord.attributes.client.genders.#{gender}"),
             'Geschlecht', 'Klienten', 'Abgeleitet aus Anrede', zeit],
      types: types_str,
      style: style
    }
  end
  Client.acceptances.each do |name_key, key|
    rows << {
      data: [key, key.class.to_s, t("acceptance.#{name_key}"), 'Prozess', 'Klienten', '', zeit],
      types: types_int,
      style: style
    }
  end
  [:active, :inactive].each do |state|
    rows << {
      data: [state, state.class.to_s, t("state.#{state}"), 'Status', 'Klienten',
             'Dynamisch aus akzeptiert und ob laufende Begleitung existiert', zeit],
      types: types_str,
      style: style
    }
  end
  Client.cost_units.each do |name_key, key|
    rows << {
      data: [key, key.class.to_s, t("cost_unit.#{name_key}"), 'Kostenträger', 'Klienten', '', zeit],
      types: types_int,
      style: style
    }
  end
  [:active, :inactive].each do |state|
    rows << {
      data: [state, state.class.to_s, t("state.#{state}"), 'Status', 'Begleitungen',
             'Dynamisch aus aktuell Start datum und end datum', zeit],
      types: types_str,
      style: style
    }
  end
  [:active, :inactive].each do |state|
    rows << {
      data: [state, state.class.to_s, t("state.#{state}"), 'Status', 'Gruppeneinsatz',
             'Dynamisch aus aktuell Start datum und end datum', zeit],
      types: types_str,
      style: style
    }
  end
  Event.kinds.each do |name_key, key|
    rows << {
      data: [key, key.class.to_s, t("event_kinds.#{name_key}"), 'Art', 'Veranstaltungen', '', zeit],
      types: types_int,
      style: style
    }
  end
  GroupOffer::OFFER_TYPES.each do |offer_type|
    rows << {
      data: [offer_type, offer_type.class.to_s, t("offer_type.#{offer_type}"),
             'Internes oder externes Gruppenangebot', 'Gruppenangebote', '', zeit],
      types: types_str,
      style: style
    }
  end
  GroupOfferCategory::CATEGORY_STATES.each do |state|
    rows << {
      data: [state, state.class.to_s, t("group_offer_categories.index.category_states.#{state}"),
             'Status', 'GA-Kategorien', '', zeit],
      types: types_str,
      style: style
    }
  end

  rows.each do |row|
    sheet.add_row(row[:data], row.slice(:types, :style))
  end

  sheet.auto_filter = "A1:#{col_alpha_indexes[columns.size - 1]}#{rows.size + 1}"
  sheet.sheet_view.pane do |pane|
    pane.top_left_cell = 'A2'
    pane.state = :frozen_split
    pane.y_split = 1
    pane.x_split = 0
    pane.active_pane = :bottom_right
  end
end
